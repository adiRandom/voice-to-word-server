{"version":3,"sources":["assets/svgs/left-arrow.svg","assets/svgs/right-arrow.svg","assets/svgs/dropdown.svg","assets/svgs/dropup.svg","models/Paragraph.ts","models/Page.ts","components/Modal/Modal.tsx","components/Timer/Timer.tsx","components/Homescreen/Homescreen.tsx","services/SaveToDocx.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Paragraph","state","isIndented","maxLength","Object","classCallCheck","this","underlyingText","lengthOnPage","calculateLengthOnPage","PAGE_LENGTH","text","localState","_text","trim","charAt","toUpperCase","slice","concat","length","words","split","RegExp","paragraphs","current","indent","IsIndented","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","word","value","push","err","return","val","Math","ceil","LINE_LENGTH","Page","workingParagraph","size","calculateLength","createClass","key","newParagraph","localParagraphs","pages","_this","filter","index","WorkingParagraphIndex","paragraph","concatToParagraph","Array","isArray","acc","i","LengthOnPage","page","console","log","get","Modal","props","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","setState","textboxValue","target","cancel","onCancel","dispose","submit","hasInput","onSubmit","react_default","a","createElement","id","style","visibility","isVisible","height","title","type","onChange","placeholder","onClick","submitText","React","Component","Timer","start","onStart","interval","setInterval","prev","onTick","end","onEnd","clearInterval","stop","onStop","className","_window","window","Homescreen","listener","timerRef","saveFile","name","document","payload","fileName","fetch","method","body","JSON","stringify","headers","Content-Type","then","_ref","asyncToGenerator","regenerator_default","mark","_callee","res","error","errorText","wrap","_context","status","json","sent","message","alert","_x","apply","arguments","requestDocx","toggleRecording","recording","textRecived","currentPage","getWorkingParagraph","_pages","updateResult","updateParagraph","splice","toConsumableArray","changeCurrentParagraph","event","_page","changeWorkingParagraph","createNewParagraph","addNewParagraph","deleteCurrentParagraph","deleteParagraph","clearPage","clearDocument","showModalForFileSaving","modal","isModalVisible","showModalForDocumentCleaning","hideModal","currentModalState","objectSpread","addNewPage","deleteCurrentPage","toggleToolbox","prevToolboxState","showToolbox","changePage","increment","currentPageIndex","rec","webkitSpeechRecognition","SpeechRecognition","lang","continuous","onresult","results","resultIndex","transcript","createRef","_this2","Modal_Modal_Modal","src","leftArrow","alt","Paragraphs","map","rightArrow","Timer_Timer","ref","transform","dropdown","dropup","App","Homescreen_Homescreen_Homescreen","Boolean","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.853e1e79.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/left-arrow.1fd757d4.svg\";","module.exports = __webpack_public_path__ + \"static/media/right-arrow.79443cdd.svg\";","module.exports = __webpack_public_path__ + \"static/media/dropdown.f06acfc6.svg\";","module.exports = __webpack_public_path__ + \"static/media/dropup.d8be3f88.svg\";","import { LINE_LENGTH, PAGE_LENGTH } from \"./Page\";\r\n\r\n/**\r\n * Imutable paragraph representaion\r\n */\r\n\r\nexport default class Paragraph {\r\n    private readonly underlyingText: string;\r\n    private readonly isIndented: boolean;\r\n    private lengthOnPage: number;\r\n\r\n    /**\r\n     * How many characters can this paragraph take before breaking\r\n     */\r\n    private readonly maxLength: number;\r\n\r\n    constructor(state: string, isIndented: boolean, maxLength?: number) {\r\n        this.underlyingText = state\r\n        this.isIndented = isIndented;\r\n        this.lengthOnPage = this.calculateLengthOnPage();\r\n\r\n        this.maxLength = maxLength ? maxLength : PAGE_LENGTH;\r\n    }\r\n\r\n    /**\r\n     * The text representation of the paragraph\r\n     */\r\n    get Paragraph(): string {\r\n        return this.underlyingText;\r\n    }\r\n\r\n    /**\r\n     * @returns How many characters does this paragraph takes on page\r\n     */\r\n    get LengthOnPage() { return this.lengthOnPage }\r\n\r\n    /**\r\n     * Whether or not this paragraph should be displayed indented and capitalized\r\n     */\r\n    get IsIndented(): boolean { return this.isIndented }\r\n\r\n    /**\r\n     * Concats some text to the paragraph\r\n     * @param text The text to concat to this paragraph\r\n     * @returns a new updated Paragraph\r\n     */\r\n\r\n    public concatToParagraph(text: string): Paragraph | Paragraph[] {\r\n        let localState = this.underlyingText;\r\n        const _text = text.trim();\r\n\r\n        if (this.underlyingText === \"\" && this.isIndented) {\r\n            localState = _text.charAt(0).toUpperCase() + _text.slice(1);\r\n        } else\r\n            localState = this.underlyingText.concat(\" \" + _text);\r\n\r\n        //Check if the resulting text fits on a page\r\n\r\n        if (localState.length <= this.maxLength) {\r\n            return new Paragraph(localState, this.isIndented, this.maxLength);\r\n        }\r\n        else {\r\n\r\n            //Split the input into words\r\n            const words = localState.split(new RegExp(\"[ \\n , .]\"));\r\n            let paragraphs = [];\r\n            let current = \"\";\r\n            let maxLength = this.maxLength;\r\n            let indent = this.IsIndented;\r\n\r\n            //Create as many paragraphs as needed and return them\r\n            for (let word of words) {\r\n                if (current.length + word.length + 1 <= maxLength) {\r\n                    if (current === \"\" && indent) {\r\n                        current = word.charAt(0).toUpperCase() + word.slice(1);\r\n                    } else\r\n                        current = current.concat(\" \" + word);\r\n                }\r\n                else {\r\n                    paragraphs.push(new Paragraph(current, indent, maxLength));\r\n                    maxLength = PAGE_LENGTH;\r\n                    indent = false;\r\n                    current = word;\r\n                }\r\n            }\r\n            if (current.length != 0)\r\n                paragraphs.push(new Paragraph(current, indent, maxLength));\r\n            return paragraphs;\r\n        }\r\n    }\r\n\r\n    private calculateLengthOnPage(): number {\r\n        const val = Math.ceil(this.underlyingText.length / LINE_LENGTH) * LINE_LENGTH;\r\n        return val === 0 ? LINE_LENGTH : val;\r\n    }\r\n\r\n\r\n}","import Paragraph from \"./Paragraph\";\r\n\r\n/**\r\n * Immutable page representation\r\n */\r\n\r\n\r\n//TODO: replace with prod values\r\nexport const LINE_LENGTH = 84;\r\nexport const PAGE_LENGTH = 4200;\r\nexport class Page {\r\n    /**\r\n     * The paragraphs contained by this page\r\n     */\r\n    private readonly paragraphs: Paragraph[];\r\n    /**\r\n     * The paragraph that is currently updating\r\n     */\r\n    private readonly workingParagraph: number;\r\n    /**\r\n     * How many paragraphs does this page contains\r\n     */\r\n    private readonly size: number;\r\n    /**\r\n     * The caracters of this page\r\n     */\r\n    private length: number;\r\n    constructor(paragraphs?: Paragraph[], workingParagraph?: number) {\r\n        this.paragraphs = paragraphs ? paragraphs : [new Paragraph(\"\", true)];\r\n        this.workingParagraph = workingParagraph ? workingParagraph : 0;\r\n        this.size = paragraphs ? paragraphs.length : 1;\r\n        this.length = this.calculateLength();\r\n    }\r\n\r\n    /**\r\n     * @returns How many paragraphs does this page contains\r\n     */\r\n    get Size() { return this.size }\r\n\r\n\r\n    /**\r\n     * @returns How many characters does this page have\r\n     */\r\n    get Length() { return this.length }\r\n\r\n    /**\r\n     * Get the index of the current working paragraph\r\n     */\r\n    get WorkingParagraphIndex() { return this.workingParagraph }\r\n\r\n    /**\r\n     * Get the paragraphs from this Page\r\n     */\r\n    get Paragraphs() { return this.paragraphs }\r\n\r\n    /**\r\n     * @returns The paragraph that is being edited at the moment\r\n     */\r\n    public getWorkingParagraph(): Paragraph {\r\n        return this.paragraphs[this.workingParagraph];\r\n    }\r\n\r\n    /**\r\n     * Add a new paragraph to this page\r\n     * @Return a new updated page\r\n     */\r\n\r\n    public addNewParagraph(): Page | Page[] {\r\n\r\n        const newParagraph = new Paragraph(\"\", true, PAGE_LENGTH - this.length);\r\n        if (this.length < PAGE_LENGTH) {\r\n            let localParagraphs = this.paragraphs;\r\n            localParagraphs.push(newParagraph);\r\n            return new Page(localParagraphs, localParagraphs.length - 1);\r\n        }\r\n        else {\r\n            const pages: Page[] = [this];\r\n            pages.push(new Page([newParagraph], 0));\r\n            return pages;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete the currently working paragraph\r\n     * @Return a new updated page\r\n     */\r\n\r\n    public deleteParagraph(): Page {\r\n        let localParagraphs = this.paragraphs;\r\n\r\n        return new Page(localParagraphs.filter((value: Paragraph, index: number) => {\r\n            return index != this.WorkingParagraphIndex\r\n        }), this.workingParagraph - 1);\r\n    }\r\n\r\n\r\n    /**\r\n     * Updates the currently working paragraph\r\n     * @param paragrapf The paragraph to replace the currently woring paragraph\r\n     * @returns A new updated page\r\n     */\r\n\r\n    public updateParagraph(val: string): Page | Page[] {\r\n        const localState = this.paragraphs;\r\n        let paragraph: Paragraph | Paragraph[] = localState[this.workingParagraph];\r\n        paragraph = paragraph.concatToParagraph(val);\r\n        if (!Array.isArray(paragraph)) {\r\n            localState[this.workingParagraph] = paragraph;\r\n            return new Page(localState, this.workingParagraph);\r\n        }\r\n        else {\r\n            localState[this.workingParagraph] = paragraph[0];\r\n            let pages: Page[] = [new Page(localState, this.workingParagraph)];\r\n            let acc = 0;\r\n            let paragraphs: Paragraph[] = [];\r\n            for (let i = 1; i < paragraph.length; i++) {\r\n                if (acc + paragraph[i].LengthOnPage <= PAGE_LENGTH)\r\n                    paragraphs.push(paragraph[i]);\r\n                else {\r\n                    let page = new Page(paragraph, 0);\r\n                    pages.push(page);\r\n                    acc = paragraph[i].LengthOnPage;\r\n                    paragraphs = [paragraph[i]]\r\n                }\r\n            }\r\n            if (paragraphs.length != 0)\r\n                pages.push(new Page(paragraphs, paragraphs.length - 1));\r\n            return pages\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update which paragraph  is being woked on\r\n     * @param index The paragraph that the user wants to edit\r\n     * @returns A new updated Page\r\n     */\r\n\r\n    public changeWorkingParagraph(index: number): Page {\r\n        return index < this.size ? new Page(this.paragraphs, index) : this;\r\n    }\r\n\r\n    private calculateLength(): number {\r\n        let acc = 0;\r\n        for (let paragraph of this.paragraphs)\r\n            acc += paragraph.LengthOnPage;\r\n        console.log(acc);\r\n        return acc;\r\n    }\r\n\r\n}","import React from 'react'\r\nimport \"./Modal.css\";\r\n\r\nexport default class Modal extends React.Component<ModalProps, ModalState>{\r\n\r\n    constructor(props: Readonly<ModalProps>) {\r\n        super(props);\r\n        this.state = {\r\n            textboxValue: ''\r\n        }\r\n    }\r\n\r\n    handleInput = (e: any) => {\r\n        this.setState({\r\n            textboxValue: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n    cancel = () => {\r\n        if (this.props.onCancel)\r\n            this.props.onCancel();\r\n\r\n        this.props.dispose();\r\n    }\r\n\r\n    submit = () => {\r\n        if (this.props.hasInput)\r\n            this.props.onSubmit(this.state.textboxValue);\r\n        else\r\n            this.props.onSubmit();\r\n\r\n        this.props.dispose();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"modal-container\" style={{\r\n                visibility: this.props.isVisible ? \"visible\" : \"hidden\"\r\n            }}>\r\n                <div id=\"modal\" style={{\r\n                    height:this.props.hasInput? '30%':'15%'\r\n                }}>\r\n                    <h3 id=\"modal-title\">{this.props.title}</h3>\r\n                    {this.props.hasInput && <input type=\"text\" id=\"modal-input\" value={this.state.textboxValue} onChange={this.handleInput} placeholder=\"Scrie aici\"></input>}\r\n                    <div id=\"modal-button-area\">\r\n                        <button id=\"modal-cancel\" onClick={this.cancel}>Anulează</button>\r\n                        <button id=\"modal-submit\" onClick={this.submit}>\r\n                            {this.props.submitText ? this.props.submitText : \"Trimite\"}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport interface ModalProps {\r\n    /**\r\n     * Whether or not the Modal is visible\r\n     */\r\n    isVisible: boolean,\r\n    /**\r\n     * The title of the Modal\r\n     */\r\n    title: string,\r\n    /**\r\n     * The callback to call on cancel\r\n     */\r\n    onCancel?: VoidEventHandler,\r\n    /**\r\n     * Dispose of the modal\r\n     */\r\n    dispose: () => void,\r\n    /**\r\n     * The callback to call on submit\r\n     * @param e: If the modal has an input, the event handler get's the inputed text as it's event param\r\n     */\r\n    onSubmit: OneParamEventHandler,\r\n    /** \r\n     * The value of the Submit button\r\n    */\r\n    submitText?: string,\r\n    /**\r\n     * Whether or not it has an input field\r\n     * @default false\r\n     */\r\n    hasInput?: boolean\r\n}\r\n\r\ninterface ModalState {\r\n    /**\r\n     * The value of the input field\r\n     */\r\n    textboxValue: string\r\n}\r\n\r\ntype VoidEventHandler = () => void\r\ntype OneParamEventHandler = (e?: string) => void","import React from 'react';\r\n\r\ninterface TimerState {\r\n    current: number;\r\n}\r\n\r\n\r\nexport interface TimerProps {\r\n    /**\r\n     * The interval of the tick in seconds\r\n     */\r\n    interval: number,\r\n    /**\r\n     * How many seconds does this timer has\r\n     */\r\n    length: number,\r\n    /**\r\n     * The className of the header\r\n     */\r\n    className?: string,\r\n    /**\r\n     * Function that gets called when the timer starts\r\n     */\r\n    onStart?: () => void,\r\n    /**\r\n     * Function that gets called when the timer ticks\r\n     */\r\n    onTick?: () => void,\r\n    /**\r\n     * Function that gets called when the timer ends\r\n     */\r\n    onEnd?: () => void,\r\n    /**\r\n     * Function that gets called when the timer stops\r\n     */\r\n    onStop?: () => void,\r\n}\r\n\r\n\r\nexport default class Timer extends React.Component<TimerProps, TimerState>{\r\n    constructor(props: Readonly<TimerProps>) {\r\n        super(props);\r\n        this.state = {\r\n            current: 0\r\n        }\r\n    }\r\n\r\n    public start = () => {\r\n        this.setState({\r\n            current: 0\r\n        }, () => {\r\n            if (this.props.onStart)\r\n                this.props.onStart();\r\n            this.interval = setInterval(() => {\r\n                const prev = this.state.current;\r\n                if (prev < this.props.length) {\r\n                    if (this.props.onTick)\r\n                        this.props.onTick(); \r\n                    this.setState({\r\n                        current: prev + this.props.interval\r\n                    })\r\n                }\r\n                else {\r\n                    this.end();\r\n                }\r\n            }, this.props.interval * 1000)\r\n        })\r\n\r\n    }\r\n\r\n    private end = () => {\r\n        if (this.props.onEnd)\r\n            this.props.onEnd();\r\n        clearInterval(this.interval!!);\r\n    }\r\n\r\n    public stop = () => {\r\n        if (this.props.onStop)\r\n            this.props.onStop();\r\n        clearInterval(this.interval!!);\r\n    }\r\n\r\n    private interval: NodeJS.Timeout | undefined = undefined;\r\n\r\n    render() {\r\n        return (\r\n            <h4 className={this.props.className}>{this.state.current} / {this.props.length} s</h4>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nimport \"./Homescreen.css\";\r\nimport { Page } from '../../models/Page';\r\nimport Paragraph from '../../models/Paragraph';\r\nimport requestDocx from '../../services/SaveToDocx';\r\nimport Modal from '../Modal/Modal';\r\nimport Timer from '../Timer/Timer';\r\n\r\nimport leftArrow from \"../../assets/svgs/left-arrow.svg\"\r\nimport rightArrow from \"../../assets/svgs/right-arrow.svg\"\r\nimport dropdown from \"../../assets/svgs/dropdown.svg\"\r\nimport dropup from \"../../assets/svgs/dropup.svg\"\r\n\r\nconst _window = window as any;\r\nexport default class Homescreen extends React.Component<{}, HomescreenState>{\r\n\r\n    constructor(props: Readonly<{}>) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            pages: [new Page()],\r\n            recording: false,\r\n            modal: {\r\n                isModalVisible: false,\r\n                onSubmit: () => { },\r\n                title: \"\",\r\n                hasInput: false,\r\n                submitText: \"\"\r\n            },\r\n            currentPage: 0,\r\n            showToolbox: false\r\n        }\r\n\r\n        //Get the recognition api\r\n        const rec = _window.webkitSpeechRecognition || _window.SpeechRecognition;\r\n\r\n        //Create an instance of SpeechRecognition\r\n        this.listener = new rec();\r\n\r\n        //Config the SpeechRecognition\r\n        this.listener.lang = \"ro-RO\";\r\n        this.listener.continuous = true;\r\n\r\n        this.listener.onresult = (event: any) => {\r\n            this.textRecived(event.results[event.resultIndex][0].transcript);\r\n        }\r\n\r\n\r\n        //Create the timer ref\r\n        this.timerRef = React.createRef();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * The listener instance responsible of recording the spoken words and translating it into text\r\n     */\r\n    readonly listener: any;\r\n    private timerRef: React.RefObject<Timer>;\r\n\r\n\r\n    /**\r\n     * Save the input text to a docx\r\n     */\r\n    saveFile = (name?: string) => {\r\n        requestDocx(this.state.pages, name!!);\r\n    }\r\n\r\n    /**\r\n     * Toggle betwheen recording states\r\n     */\r\n\r\n    toggleRecording = () => {\r\n\r\n        this.setState((prev: HomescreenState) => ({\r\n            recording: !prev.recording\r\n        }), () => {\r\n            if (!this.state.recording) {\r\n                this.listener.stop()\r\n                this.timerRef.current!!.stop();\r\n            } else {\r\n                this.listener.start();\r\n                this.timerRef.current!!.start();\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    /**\r\n     * Handle incoming text\r\n     * @param text The text recived\r\n     */\r\n    textRecived = (text: string) => {\r\n\r\n        //Get the paragraph in work\r\n        let workingParagraph = this.state.pages[this.state.currentPage].getWorkingParagraph();\r\n\r\n\r\n        //Get the entire pages array, update it and set the new state\r\n\r\n        const _pages = this.state.pages;\r\n        const updateResult = _pages[this.state.currentPage].updateParagraph(text);\r\n        let currentPage = this.state.currentPage;\r\n        if (Array.isArray(updateResult)) {\r\n            _pages.splice(this.state.currentPage, 1, ...updateResult);\r\n            currentPage += (updateResult.length - 1);\r\n        }\r\n        else {\r\n            _pages.splice(this.state.currentPage, 1, updateResult);\r\n        }\r\n\r\n        //And set the new state\r\n        this.setState({\r\n            pages: _pages,\r\n            currentPage: currentPage\r\n        })\r\n    }\r\n\r\n\r\n    /**\r\n     * Change the paragraph that is being worked on\r\n     */\r\n    changeCurrentParagraph = (event: any) => {\r\n\r\n\r\n        //Change the working paragraph of the current page\r\n\r\n        const _page = this.state.pages[this.state.currentPage].changeWorkingParagraph(event.target.value - 1);\r\n\r\n        //Get the entire pages array, update it then update the state\r\n        const _pages = this.state.pages;\r\n        _pages[this.state.currentPage] = _page\r\n        this.setState({\r\n            pages: _pages\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Add a new paragraph to the currently working page\r\n     */\r\n    createNewParagraph = () => {\r\n        //Add a new paragraph to the current page\r\n        const updateResult = this.state.pages[this.state.currentPage].addNewParagraph();\r\n\r\n        const _pages = this.state.pages;\r\n        let currentPage = this.state.currentPage;\r\n        if (Array.isArray(updateResult)) {\r\n            _pages.splice(this.state.currentPage, 1, ...updateResult);\r\n            currentPage++;\r\n        }\r\n        else {\r\n            _pages.splice(this.state.currentPage, 1, updateResult);\r\n        }\r\n        this.setState({\r\n            pages: _pages,\r\n            currentPage: currentPage\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Deletes the currently working paragraph\r\n     */\r\n    deleteCurrentParagraph = () => {\r\n\r\n        const _page = this.state.pages[this.state.currentPage].deleteParagraph();\r\n\r\n        const _pages = this.state.pages;\r\n        _pages[this.state.currentPage] = _page\r\n        this.setState({\r\n            pages: _pages\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Clear this page\r\n     */\r\n    clearPage = () => {\r\n\r\n        const _page = new Page;\r\n        const _pages = this.state.pages;\r\n        _pages[this.state.currentPage] = _page\r\n        this.setState({\r\n            pages: _pages,\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Clear the document\r\n     */\r\n\r\n    clearDocument = () => {\r\n        this.setState({\r\n            pages: [new Page()]\r\n        }, () => {\r\n            /**\r\n             * After the document has been cleared, stop the recording\r\n             */\r\n            if (this.state.recording)\r\n                this.toggleRecording();\r\n        })\r\n    }\r\n\r\n\r\n    showModalForFileSaving = () => {\r\n        this.setState({\r\n            modal: {\r\n                isModalVisible: true,\r\n                onSubmit: this.saveFile,\r\n                title: \"Introdu numele fisierului\",\r\n                hasInput: true,\r\n                submitText: \"Salvează\"\r\n            }\r\n        })\r\n    }\r\n\r\n    showModalForDocumentCleaning = () => {\r\n        this.setState({\r\n            modal: {\r\n                isModalVisible: true,\r\n                onSubmit: this.clearDocument,\r\n                title: \"Doriți să ștergeți acest document?\",\r\n                hasInput: false,\r\n                submitText: \"Da\"\r\n            }\r\n        })\r\n    }\r\n\r\n    hideModal = () => {\r\n        const currentModalState = this.state.modal;\r\n        this.setState({\r\n            modal: { ...currentModalState, isModalVisible: false }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Add a new page to the compunet and switch to it\r\n     */\r\n\r\n    addNewPage = () => {\r\n        //Get the current pages\r\n\r\n        const _pages = this.state.pages;\r\n\r\n        //Add a new page\r\n\r\n        _pages.push(new Page());\r\n\r\n        //Update the state\r\n\r\n        this.setState({\r\n            currentPage: _pages.length - 1,\r\n            pages: _pages\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Deletes the current page\r\n     */\r\n    deleteCurrentPage = () => {\r\n        //Get the current pages\r\n\r\n        let _pages = this.state.pages;\r\n\r\n        //Get the current page index\r\n\r\n        const index = this.state.currentPage;\r\n\r\n        //Delete the current page\r\n\r\n        _pages.splice(index, 1);\r\n        if (_pages.length === 0)\r\n            _pages = [new Page()];\r\n\r\n        //Update the state\r\n\r\n        this.setState({\r\n            pages: _pages\r\n        })\r\n    }\r\n\r\n\r\n    /**\r\n     * Toggle the display of the toolbox\r\n     */\r\n    toggleToolbox = () => {\r\n        const prevToolboxState = this.state.showToolbox;\r\n        this.setState({\r\n            showToolbox: !prevToolboxState\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Change the currently working page\r\n     */\r\n\r\n    changePage = (increment: -1 | 1) => {\r\n\r\n        //Get the index of the current page\r\n        const currentPageIndex = this.state.currentPage;\r\n\r\n        //Check if the user wants to go back or ahead a page\r\n        if (increment === -1) {\r\n            if (currentPageIndex - 1 >= 0)\r\n                this.setState({\r\n                    currentPage: currentPageIndex - 1\r\n                })\r\n        }\r\n        else {\r\n            if (currentPageIndex + 1 < this.state.pages.length)\r\n                this.setState({\r\n                    currentPage: currentPageIndex + 1\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <main id='homescreen-container'>\r\n                <Modal isVisible={this.state.modal.isModalVisible} submitText={this.state.modal.submitText}\r\n                    title={this.state.modal.title} dispose={this.hideModal} onSubmit={this.state.modal.onSubmit}\r\n                    hasInput={this.state.modal.hasInput}></Modal>\r\n                <div id=\"page-display\">\r\n                    <img src={leftArrow} alt=\"stanga\" id=\"left-arrow\" className=\"arrow\" onClick={() => this.changePage(-1)} />\r\n                    <section id=\"recording-display\">\r\n                        {this.state.pages[this.state.currentPage].Paragraphs.map((value: Paragraph, index) =>\r\n                            (<div className={`paragraph${value.IsIndented ? ' indented' : ''}`} key={index}>{value.Paragraph}</div>)\r\n                        )}\r\n                    </section>\r\n                    <img src={rightArrow} alt=\"dreapta\" id=\"right-arrow\" onClick={() => this.changePage(1)} className=\"arrow\" />\r\n\r\n                </div>\r\n                <h4 id=\"page-indicator\">{this.state.currentPage + 1} / {this.state.pages.length}</h4>\r\n                <Timer ref={this.timerRef} interval={1} length={60} onEnd={this.toggleRecording}></Timer>\r\n                <button className=\"button\" onClick={this.toggleRecording}>{!this.state.recording ? \"Înregistrează\" : \"Stop\"}</button>\r\n                <h5>Paragraful curent</h5>\r\n                <select id=\"current-paragraph\" value={this.state.pages[this.state.currentPage].WorkingParagraphIndex + 1} onChange={(event) => this.changeCurrentParagraph(event)}>\r\n                    {this.state.pages[this.state.currentPage].Paragraphs.map((val, index) => (\r\n                        <option key={index} value={index + 1}>{index + 1}</option>\r\n                    ))}\r\n                </select>\r\n                <aside id=\"toolbox\" style={{\r\n                    transform: this.state.showToolbox ? `translateY(0)` : `translateY(calc(35vh - 24px))`\r\n                }}>\r\n                    <div id=\"toolbox-button\" onClick={this.toggleToolbox}>\r\n                        <img id=\"toolbox-button-icon\" alt=\"buton toolbox\"\r\n                            src={this.state.showToolbox ? dropdown : dropup}></img>\r\n                    </div>\r\n                    <section className=\"button-duo\">\r\n                        <button className=\"button\" onClick={this.clearPage}>Curăță pagina curent</button>\r\n                        <button className=\"button\" onClick={this.showModalForDocumentCleaning}>Curăță documentul</button>\r\n                    </section>\r\n                    <section className=\"button-duo\">\r\n                        <button className=\"button\" onClick={this.createNewParagraph}>Adaugă un paragraf</button>\r\n                        <button className=\"button\" onClick={this.deleteCurrentParagraph}>Șterge paragraful curent</button>\r\n                    </section>\r\n                    <section className=\"button-duo\">\r\n                        <button className=\"button\" onClick={this.addNewPage}>Adaugă o pagină</button>\r\n                        <button className=\"button\" onClick={this.deleteCurrentPage}>Șterge pagina curentă</button>\r\n                    </section>\r\n                    <button className=\"button\" onClick={this.showModalForFileSaving}>Salvează</button>\r\n                </aside>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\ninterface HomescreenState {\r\n    /**\r\n     * The pages of this document\r\n     */\r\n    pages: Page[]\r\n    /**\r\n     * Whether or not the app is currently recording\r\n     */\r\n    recording: boolean,\r\n\r\n    /**\r\n     * The page that is currently being worked on\r\n     */\r\n    currentPage: number,\r\n    /**\r\n     * The state of the modal used in this component\r\n     */\r\n    modal: ModalState,\r\n    /**\r\n     * Whether or not the toolbox is up\r\n     */\r\n    showToolbox: boolean\r\n\r\n}\r\n\r\n/**\r\n * The interface representing the  state of the Modal used in this component\r\n */\r\n\r\ninterface ModalState {\r\n    /**\r\n     * The title of the modal\r\n     */\r\n    title: string,\r\n    /**\r\n     * The event handler to be called if the modal gets submited\r\n     */\r\n    onSubmit: (e?: string) => void,\r\n    /**\r\n     * Whether or not the save dialog is visible\r\n     */\r\n    isModalVisible: boolean,\r\n    /**\r\n     * Whether or not the modal has an input field\r\n     */\r\n    hasInput: boolean,\r\n    /**\r\n     * The text on the submit button\r\n     */\r\n    submitText: string\r\n}","import { Page } from \"../models/Page\";\r\n\r\nexport default function requestDocx(document: Page[], name: string): void {\r\n\r\n    const payload = {\r\n        document: document,\r\n        fileName: name\r\n    }\r\n\r\n    fetch(\"http://localhost:8000/doc\", {\r\n        method: 'POST',\r\n        body: JSON.stringify(payload),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }).then(async (res: Response) => {\r\n        if (res.status === 500) {\r\n            const error: Error = await res.json();\r\n            const errorText = error.name + \" : \" + error.message;\r\n            alert(\"Nu s-a putut salva documentul. Încercați din nou. \\n Eroare: \" + errorText);\r\n        }\r\n    });\r\n\r\n}","import React from \"react\";\nimport { Route } from \"react-router\";\nimport Homescreen from \"./components/Homescreen/Homescreen\";\n\nexport default class App extends React.Component<{}, {}>{\n  render() {\n    return (\n      <Homescreen></Homescreen>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n        <App />,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}